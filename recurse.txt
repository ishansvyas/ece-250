.text   
        .align  2

    # CHECK SLIDE 71 (lecture3) FOR PROGRAM OUTLINE!

        .globl  main
main:   
    # create stack frame
    addi    $sp,        $sp,        -4          # allocate space for stack
    sw      $ra,        0($sp)                  # creating 4 bytes of space on the stack for everything your main function is doing

    li      $v0,        4                       # \
    la      $a0,        prompt                  #  > prints prompt to console
    syscall                                     # /

    li      $v0,        5                       # \
    syscall                                     #  > takes input and stores N in t0
    move    $t0,        $v0                     # /

    addi    $sp,        $sp,        -4          # store N in stack
    sw      $t0,        0($sp),     #
    move    $a0,        $t0                     # store N also in a0

    jal     _recurse                            # jump to recurse function

    move    $a0,        $v0
    li      $v0,        1
    syscall 

    lw      $t0,        0($sp)                  # put N in t0
    addi    $sp,        $sp,        4           # ^

    lw      $ra,        0($sp)                  # collapse that stack that you initialized before
    addi    $sp,        $sp,        4
    jr      $ra                                 # similar to return 0 in C; END PROGRAM

_recurse:
    addi    $sp,        $sp,        -16
    sw      $ra,        0($sp)
    sw      $s0,        4($sp)
    sw      $s1,        8($sp)
    sw      $s2,        12($sp)

    # handle base case
    beq     $a0,        $0,         _base_case

    # handle not base case
    addi    $a0,        $a0,        -1          # make a0 N-1
    jal     _recurse

    # v0 is now f(N-1)
    addi    $a0,        $a0,        1           # make a0 N

    #evaluate function
    li      $s0,        3
    mul     $s0,        $a0,        $s0
    addi    $s0,        $s0,        7           #3*f(N) + 7

    li      $s1,        2
    mul     $s1,        $s1,        $v0         #2*f(N-1)

    sub     $v0,        $s0,        $s1         # make v0 = f(N). allow the jump up
    j       _clean

_base_case:                                     # if $a0 = 0, set $v0 = 2 and jump to clean
    li      $s0,        2
    move    $v0,        $s0

_clean: 
    lw      $ra,        0($sp)
    lw      $s0,        4($sp)
    lw      $s1,        8($sp)
    lw      $s2,        12($sp)
    addi    $sp,        $sp,        16
    jr      $ra

.data   
nln:    .asciiz "\n"
prompt: .asciiz "Enter number:"
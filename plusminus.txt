.text
.align 2

.globl main

sort_swap_beginning: 
    addi $sp, $sp, -4       #  stack frame
    sw $ra, 0($sp)          #  a0 = prev, a1 = curr, a2 = next 
    
    lw $t1, 68($a2)         # next->next into t1
    move $t0, $a1           # curr into t0

    sw $t1, 68($a1)         # curr->next = next->next
    sw $t0, 68($a2)         # next->next = curr
    beq $a0, $0, sort_swap_at_beg_of_list

    move $t0, $a2           # \
    sw $t0, 68($a0)         #  > prev->next = next
    j sort_swap_end         # /

sort_swap_at_beg_of_list:
    move $s3, $s2           #beginning node = next
    j sort_swap_end

sort_swap_end:
    lw $ra, 0($sp)          # \
    addi $sp, $sp, 4        #  > exit
    jr $ra                  # /

cmp_str_player:
    lb $t1, ($a0)           # load first letter from curr
    lb $t2, ($a1)           # load first letter from next

    sub $t0, $t1, $t2       # if curr alphabetically before next, t0 will be negative
    beq $t0, $0, cmp_str_player_equal

    slti $t0, $t0, 0        # if curr alphabetically before next, t0 = 1 (else t0 = 0)
    li $t3, 1               # set t3 = 1 (for comparison)
    beq $t0, $t3, cmp_str_player_no_switch
    j cmp_str_player_switch

cmp_str_player_equal:
    addi $a0, $a0, 1
    addi $a1, $a1, 1
    j cmp_str_player

cmp_str_player_switch:
    li $v0, 1               # switch needed
    lw $ra, 0($sp)          # \
    addi $sp, $sp, 4        #  > exits function
    jr $ra                  # /

cmp_str_player_no_switch:
    li $v0, 0               # no switch needed
    lw $ra, 0($sp)          # \
    addi $sp, $sp, 4        #  > exits function
    jr $ra                  # /

player_comp: 
    addi $sp, $sp, -4       # allocate space for stack
    sw $ra, 0($sp)          # creating 4 bytes of space on the stack

    # if switch needed, return 1. 
    # if no switch needed, return 0. 
    lw $t0, 64($a0)
    lw $t1, 64($a1)
    sub $t2, $t0, $t1    
    
    # if t==0, check strings      
    beq $t2, $0, cmp_str_player

    slti $t3, $t2, 0
    beq $t3, $0, cmp_str_player_no_switch       # if t2>0, no switch needed (POINTS COMP) 
    j cmp_str_player_switch                     # if t2<=0, switch needed (t2==0 alr checked tho)


sort_beginning:
    addi $sp, $sp, -24      #  
    sw $ra, 0($sp)          #   
    sw $s0, 4($sp)          # 
    sw $s1, 8($sp)          # create stack frame
    sw $s2, 12($sp)         #
    sw $s3, 16($sp)         #
    sw $s4, 20($sp)         #

    move $s3, $a0           # s3 is a copy of the head of linked list

sort_outer: 
    move $s1, $s3           # s1: curr
    li $s0, 0               # s0: prev (== NULL)
    li $s4, 0               # not_sorted = false
sort_inner:
    beq $s1, $0, sort_next_null     # curr null check
    lw $s2, 68($s1)                 # s2: next
    beq $s2, $0, sort_next_null     # if next==NULL, branch to next_null
sort_next_not_null:
    move $a0, $s1           #  curr to a0
    move $a1, $s2           #  next to a1
    jal player_comp         # compare current and next. 
        # if switch needed, $v0= 1 
        # if no switch needed, $v0= 0 
    or $s4, $s4, $v0                # have i ever switched?

    # no switch             
    beq $v0, $0, sort_move_fwd  

    # switch
    move $a0, $s0
    move $a1, $s1
    move $a2, $s2
    jal sort_swap_beginning

sort_move_fwd:
    # here is where I just move the pointers forward and go back to sort_inner
    move $s0, $s1
    move $s1, $s2
    j sort_inner

sort_next_null:
    # here is where I set curr=NULL (IF NEEDED?) and exit the inner loop (i.e. go back to sort outer?)
    beq $s4, $0, sort_end
    j sort_outer

sort_end:
    # NOTE: POTENTIAL ISSUE W/ FOLLOWING LINE: what if rearranges s.t. s3 no longer head?
    move $v0, $s3           # moves head of list to v0. 

    lw $ra, 0($sp)          # 
    lw $s0, 4($sp)          #
    lw $s1, 8($sp)          #   
    lw $s2, 12($sp)         #   exits function
    lw $s3, 16($sp)         #
    lw $s4, 20($sp)         #
    addi $sp, $sp, 24       #  
    jr $ra                  # 

main:
    # create stack frame
    addi $sp, $sp, -8       # allocate space for stack
    sw $ra, 4($sp)          # creating 8 bytes of space on the stack
    sw $s1, 0($sp)
    li $s1, 0               # reset s1 for convention

    jal read_file_beginning

    move $a0, $v0           # $a0 now has head of linked list
    jal sort_beginning    

    move $a1, $v0           # $a1 now has head of linked list
    jal print_linked_list

    lw $s1, 0($sp)
    lw $ra, 4($sp)          # \
    addi $sp, $sp, 8        #  > exits function
    jr $ra                  # /

read_file_beginning:
    addi $sp, $sp, -8       # allocate space for stack
    sw $ra, 4($sp)          # creating 4 bytes of space on the stack
    sw $s0, 0($sp)
read_file:
    li $v0, 4               # \
    la $a0, prompt_name     #  > prints prompt to console
    syscall                 # /
 
    li $v0, 9               # \
    li $a0, 72              #  > dynamically allocate memory
    syscall                 # / 
    move $a0, $v0           # a0 now holds address of allocated memory  

    li $v0, 8               # \
    li $a1, 64              #  > read whatever is typed into address in a0
    syscall                 # /

    move $s0, $a0           # at this point, s0 contains address of string inputted by user 

    la $a1, DONE                    # load address of "DONE" (what to compare to)
    jal cmp_str                     # HERE IS WHERE I COMPARE input TO done
    beq $0, $v0, read_file_exit     #if string = done, branch to read_file_exit

    li $v0, 4               # \
    la $a0, prompt_pf       #  > prints points-for prompt to console
    syscall                 # /

    li $v0, 5               # read points for  
    syscall                 # ^

    move $t0, $v0           # put points for in t0 

    li $v0, 4               # \
    la $a0, prompt_pa       #  > prints points-against prompt to console
    syscall                 # /
    
    li $v0, 5               # read points against  
    syscall                 # ^

    sub $t0, $t0, $v0       # pd calculation
    sw $t0, 64($s0)         # store pd in allocated space
    
    sw $s1, 68($s0)         # add as head to linked list
    move $s1, $s0

    j read_file             # repeat while loop


read_file_exit:
    move $v0, $s1           # copy head of linked list into $v1

    lw $s0, 0($sp)          # \
    lw $ra, 4($sp)          # \
    addi $sp, $sp, 8        #  > exits function
    jr $ra                  # /


cmp_str: 
    li $v0, 1               # assume not equal
    lb $t1, ($a0)           # load first letter from input
    lb $t2, ($a1)           # load first letter from DONE

    beq $t2, $0, cmp_str_equal
    bne $t1, $t2, cmp_str_not_equal

    addi $a0, $a0, 1
    addi $a1, $a1, 1
    j cmp_str

cmp_str_not_equal:              # strings not equal  
    li $v0, 1               # assert not equal
    jr $ra                  # return after cmp_str_not_equal

cmp_str_equal:                  # strings equal
    li $v0, 0               # assert equality
    jr $ra                  # return after cmp_str_equal

print_linked_list:

    # last element is being printed N times 
    # AND sort function does not work
    addi $sp, $sp, -4       # allocate space for stack
    sw $ra, 0($sp)          # creating 4 bytes of space on the stack
print_linked_list_loop:
    # a1 is already beginning of linked list
    move $a0, $a1           # prepare to remove new line
    jal remove_new_line_beginning

    move $a0, $a1           # \
    li $v0, 4               #  > print string 
    syscall                 # /

    li $v0, 4               # \
    la $a0, space           #  > print space
    syscall                 # /

    li $v0, 1               # \
    lw $a0, 64($a1)         #  > print int
    syscall                 # /

    li $v0, 4               # \
    la $a0, nln             #  > print new line
    syscall                 # /

    lw $t0, 68($a1)
    beq $t0, $0, print_linked_list_end
    beq $t0, $a1, print_linked_list_end
    move $a1, $t0
    j print_linked_list_loop

print_linked_list_end:
    lw $ra, 0($sp)          # \
    addi $sp, $sp, 4        #  > exit
    jr $ra                  # /

remove_new_line_beginning:
    addi $sp, $sp, -4       # \ stack frame
    sw $ra, 0($sp)          # /
remove_new_line_loop:
    # a0 holds address of string
    lb $t1, ($a0)
    li $t0, 10
    beq $t0, $t1, remove_new_line_change
    addi $a0, $a0, 1
    j remove_new_line_loop

remove_new_line_end:
    lw $ra, 0($sp)          # \
    addi $sp, $sp, 4        #  > exit 
    jr $ra                  # /

remove_new_line_change:
    li $t0, 0
    sb $t0, ($a0)
    j remove_new_line_end


.data
DONE: .asciiz "DONE"
nln: .asciiz "\n"
space: .asciiz " "
prompt_name: .asciiz "Player name:"
prompt_pf: .asciiz "Points for:"
prompt_pa: .asciiz "Points against:"
